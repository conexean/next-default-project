generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Action {
  E
  S
}

enum Permission {
  READ
  WRITE
  DELETE
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique @db.VarChar(150)
  password      String
  active        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deactivatedAt DateTime?

  employeeId String   @unique
  employee   Employee @relation(fields: [employeeId], references: [id])

  userPermissions UserPermission[]
}

model UserPermission {
  id         String     @id @default(cuid())
  userId     String
  permission Permission
  module     String     @db.VarChar(50)
  user       User       @relation(fields: [userId], references: [id])

  @@unique([userId, module, permission])
}

model Company {
  id            String    @id @default(cuid())
  name          String    @db.VarChar(150)
  cnpj          String    @unique @db.VarChar(14)
  active        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deactivatedAt DateTime?
  vehicles      Vehicle[]

  employees                CompanyEmployee[]
  visitorMovementCompanies VisitorMovementCompany[]
}

model Vehicle {
  id               String    @id @default(cuid())
  licensePlate     String    @unique @db.VarChar(7)
  owner            String    @db.VarChar(50)
  carModel         String    @db.VarChar(50)
  companyId        String
  active           Boolean   @default(true)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deactivatedAt    DateTime?
  company          Company   @relation(fields: [companyId], references: [id])
  vehicleMovements VehicleMovement[]
}

model Employee {
  id                String    @id @default(cuid())
  fullName          String    @db.VarChar(100)
  registration      String    @unique @db.VarChar(20)
  internalPassword  String?   @db.VarChar(50)
  telephone         String?   @db.VarChar(10)
  cellPhone         String?   @db.VarChar(11)
  observation       String?   @db.VarChar(200)
  photoURL          String?   @db.VarChar(200)
  active            Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deactivatedAt     DateTime?
  companies         CompanyEmployee[]
  employeeMovements EmployeeMovement[]
  user              User?
}

model CompanyEmployee {
  companyId  String
  employeeId String
  company    Company     @relation(fields: [companyId], references: [id])
  employee   Employee @relation(fields: [employeeId], references: [id])

  @@id([companyId, employeeId])
}

model VehicleMovement {
  id        String   @id @default(cuid())
  vehicleId String
  action    Action
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])
}

model EmployeeMovement {
  id         String      @id @default(cuid())
  employeeId String
  action     Action
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  employee   Employee @relation(fields: [employeeId], references: [id])
}

model VisitorMovement {
  id           String   @id @default(cuid())
  fullName     String   @db.VarChar(100)
  cpf          String?  @db.VarChar(11)
  telephone    String?  @db.VarChar(11)
  licensePlate String?  @db.VarChar(7)
  action       Action
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  companies VisitorMovementCompany[]
}

model VisitorMovementCompany {
  visitorMovementId String
  companyId         String
  visitorMovement   VisitorMovement @relation(fields: [visitorMovementId], references: [id])
  company           Company         @relation(fields: [companyId], references: [id])

  @@id([visitorMovementId, companyId])
}

model Shortcut {
  id        String    @id @default(cuid())
  url       String    @db.VarChar(200)
  label     String    @db.VarChar(50)
  color     String    @db.VarChar(50)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
