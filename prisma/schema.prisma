generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://dbmasteruser:correaab290499@ls-28804669717f9299d2dfbd36661c615cb8f465b8.cracgygkad7j.us-east-1.rds.amazonaws.com:5432/staging_supervisao"
}

enum Action {
  E
  S
}

enum Permission {
  READ
  WRITE
  DELETE
  ADMIN
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique @db.VarChar(150)
  password      String
  active        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deactivatedAt DateTime?

  employeeId Int   @unique
  employee   Employee @relation(fields: [employeeId], references: [id])

  userPermissions UserPermission[]
}

model UserPermission {
  id         Int       @id @default(autoincrement())
  userId     Int
  permission Permission
  module     String     @db.VarChar(50)
  user       User       @relation(fields: [userId], references: [id])

  @@unique([userId, module, permission])
}

model Company {
  id            Int       @id @default(autoincrement())
  name          String    @db.VarChar(150)
  cnpj          String    @unique @db.VarChar(14)
  active        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deactivatedAt DateTime?
  vehicles      Vehicle[]

  employees                CompanyEmployee[]
  visitorMovementCompanies VisitorMovementCompany[]
}

model Vehicle {
  id               Int       @id @default(autoincrement())
  licensePlate     String    @unique @db.VarChar(7)
  owner            String?   @db.VarChar(50)
  carModel         String    @db.VarChar(50)
  companyId        Int
  active           Boolean   @default(true)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deactivatedAt    DateTime?
  company          Company   @relation(fields: [companyId], references: [id])
  vehicleMovements VehicleMovement[]
}

model Employee {
  id                Int       @id @default(autoincrement())
  fullName          String    @db.VarChar(100)
  registration      String    @unique @db.VarChar(20)
  internalPassword  String?   @db.VarChar(50)
  telephone         String?   @db.VarChar(10)
  cellPhone         String?   @db.VarChar(11)
  observation       String?   @db.VarChar(200)
  photoURL          String?   @db.VarChar(200)
  active            Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deactivatedAt     DateTime?
  companies         CompanyEmployee[]
  employeeMovements EmployeeMovement[]
  user              User?
}

model CompanyEmployee {
  companyId  Int
  employeeId Int
  company    Company     @relation(fields: [companyId], references: [id])
  employee   Employee @relation(fields: [employeeId], references: [id])

  @@id([companyId, employeeId])
}

model VehicleMovement {
  id          Int      @id @default(autoincrement())
  vehicleId   Int
  observation String?  @db.VarChar(200)
  action      Action
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  vehicle     Vehicle  @relation(fields: [vehicleId], references: [id])
}

model EmployeeMovement {
  id          Int      @id @default(autoincrement())
  employeeId  Int
  observation String?  @db.VarChar(200)
  action      Action
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  employee    Employee @relation(fields: [employeeId], references: [id])
}

model VisitorMovement {
  id           Int      @id @default(autoincrement())
  fullName     String   @db.VarChar(100)
  cpf          String?  @db.VarChar(11)
  telephone    String?  @db.VarChar(11)
  licensePlate String?  @db.VarChar(7)
  observation  String?  @db.VarChar(200)
  action       Action
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  companies VisitorMovementCompany[]
}

model VisitorMovementCompany {
  visitorMovementId Int
  companyId         Int
  visitorMovement   VisitorMovement @relation(fields: [visitorMovementId], references: [id])
  company           Company         @relation(fields: [companyId], references: [id])

  @@id([visitorMovementId, companyId])
}

model Shortcut {
  id        Int       @id @default(autoincrement())
  url       String    @db.VarChar(200)
  label     String    @db.VarChar(50)
  color     String    @db.VarChar(50)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
